{"version":3,"sources":["assets/images/headshot.jpg","components/About/index.js","components/Nav/index.js","assets/images/now-playing.png","components/Portfolio/index.js","components/Contact/index.js","utils/helpers.js","App.js","serviceWorker.js","index.js"],"names":["About","id","className","src","headshot","alt","width","Nav","props","name","map","link","href","onClick","setPage","Portfolio","projects","img","nowPlaying","description","tech","project","Contact","useState","errorMessage","setErrorMessage","email","message","formState","setFormState","handleChange","e","target","isValid","test","String","toLowerCase","validateEmail","value","console","log","length","action","method","enctype","htmlfor","type","defaultValue","onBlur","class","htmlFor","rows","App","page","renderPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3b99b1d4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/headshot.883c3565.jpg\";","  \nimport React from 'react';\nimport headshot from '../../assets/images/headshot.jpg';\n\nfunction About() {\n    \n    return (\n        <section id=\"about\">\n            <img className=\"drew\" src={headshot} alt=\"headshot\" width=\"25%\" />\n            <div className=\"about-text\">\n                <p>\n                My name is Drew Vena, I am a full stack web developer who learned the tricks of the trade through a bootcamp by The University of Texas.  \n                </p>\n            </div>\n        </section>\n    )\n}\nexport default About;","import React from 'react';\n\nfunction Nav(props) {\n    const links = [\n        {\n            name: 'About Me',\n            id: '#about-me',\n        },\n        {\n            name: 'Portfolio',\n            id: '#portfolio',\n        },\n        {\n            name: 'Contact',\n            id: '#contact',\n        },\n        {\n            name: 'Resume',\n            id: '#resume',\n        }\n    ]\n    return (\n        <nav className=\"header\">\n            <ul className=\"links\">\n                {links.map((link) => (\n                    <li>\n                        <a className=\"linkers\" href={link.id} id={link.id} onClick={() => (\n                            props.setPage(link.name)\n                            )\n                        }>\n                            {link.name}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    )\n}\nexport default Nav;","export default __webpack_public_path__ + \"static/media/now-playing.a1f03526.png\";","import React from 'react';\nimport nowPlaying from '../../assets/images/now-playing.png';\nfunction Portfolio() {\n    const projects = [\n        {\n            name: 'Now Playing',\n            img: nowPlaying,\n            description: 'Now Playing is a social media application where users post music they are listening to and other users can interact, comment and like each others posts!',\n            tech: 'Handlebars, Express, Sequelize'\n        },\n        {\n            name: 'Cinequiz',\n            img: 'cinequiz',\n            description: 'The Movie Game that uses a third party api to build a movie trivia game for the user to enjoy! All answers are responded to using a gif and highscores are logged for everyone, lets see who is best!',\n            tech: 'HTML, CSS, JS, OMDb API, GIPHY API'\n        }\n    ];\n    return (\n        <section id=\"projects\">\n            {projects.map((project) => (\n                <div className=\"Project\">\n                    <img className=\"port-img\"src={project.img} alt={`${project.name}`} />\n                    <h3 className=\"proj-d\">{project.name}</h3>\n                    <p className=\"proj-d\">{project.description}</p>\n                    <p className=\"proj-d\">{project.tech}</p>\n                </div>\n            ))}\n        </section>\n    )\n}\nexport default Portfolio;","import React, { useState } from 'react';\nimport { validateEmail } from '../../utils/helpers';\n\nfunction Contact (){\n    const [errorMessage, setErrorMessage] = useState('');\n    const [formState, setFormState] = useState({ name: '', email: '', message: '' });\n    const { name, email, message } = formState;\n    function handleChange(e) {\n        if (e.target.name === 'email') {\n            const isValid = validateEmail(e.target.value);\n            console.log(isValid);\n            // isValid conditional statement\n            if (!isValid) {\n                setErrorMessage('Your e-mail is invalid.');\n            } else {\n                setErrorMessage('');\n            }\n        } else {\n            if (!e.target.value.length) {\n              setErrorMessage(`${e.target.name} is required.`);\n            } else {\n              setErrorMessage('');\n            }\n          } \n        \n          if (!errorMessage) {\n            setFormState({ ...formState, [e.target.name]: e.target.value });\n          }\n        console.log('errorMessage', errorMessage);\n    }\n    return (\n        <div className=\"container\">\n            <form className=\"contact-forms\"action =\"mailto:drewvena1@gmail.com\" target =\"_blank\"method=\"POST\" enctype=\"multipart/form-data\">\n                <div className=\"contact-box\">\n                <label htmlfor=\"name\">Your Name</label>\n                <input type=\"text\" id=\"name\" name=\"name\"defaultValue={name} onBlur={handleChange}></input>\n                </div>\n                <div className=\"contact-box\">\n                <label htmlfor=\"email\">Your Email</label>\n                <input type=\"text\" id=\"email\" name=\"email\"defaultValue={email} onBlur={handleChange}></input>\n                </div>\n                <div class=\"contact-box\">\n              <label class=\"textarea-label\" htmlFor=\"Message\">Message</label>\n              <br/>\n              <textarea name=\"Message\" defaultValue={message} onBlur={handleChange} rows=\"4\" />\n            </div>\n                {errorMessage && (\n                <div>\n                    <p className=\"error-text\">{errorMessage}</p>\n                </div>\n            )}\n             <button className=\"button\" type=\"submit\">Email Drew</button>\n            </form>\n\n        </div>\n    )\n}\nexport default Contact","export function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n  \n  export function validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }","import React, { useState } from 'react';\nimport About from './components/About';\nimport Nav from './components/Nav'\nimport Portfolio from './components/Portfolio'\nimport Contact from './components/Contact'\nimport './index.css';\n\nfunction App() {\n  const [page, setPage] = useState('About');\n  function renderPage() {\n    switch(page) {\n      case 'Portfolio':\n        return <Portfolio />;\n      case 'Contact': \n        return <Contact />;\n      case 'Resume':\n        return '';\n      case 'About Me':\n        return <About />;\n        default:      return <About></About>;\n    }\n  }\n  return (\n    <div className=\"mainpage\">\n      <Nav \n        page={page}\n        setPage={setPage}\n        renderPage={renderPage}\n      />\n      {renderPage()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}